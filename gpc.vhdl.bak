library std;
use std.standard.all;

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use ieee.std_logic_arith.all;	 
use ieee.std_logic_unsigned.all;

entity gpc is
	port (	A, B: in std_logic_vector(7 downto 0);
			Z: out std_logic_vector(15 downto 0) );
end entity gpc;

architecture Behave of gpc is

	component register_file is
	port (	A1, A2: in std_logic_vector(2 downto 0);
			D1, D2: out std_logic_vector(15 downto 0);
			A3: in std_logic_vector(2 downto 0);
			D3: in std_logic_vector(15 downto 0);
			en, clk: in std_logic);
	end component register_file;

	component alu is
	port (	A, B: in std_logic_vector(15 downto 0);
			C: out std_logic_vector(15 downto 0);
			S: in  std_logic_vector(1 downto 0);
			Z: out std_logic);
	end component alu;

	component Memory_asyncread_syncwrite is 
	port (address,Mem_datain: in std_logic_vector(15 downto 0); clk,Mem_wrbar: in std_logic;
				Mem_dataout: out std_logic_vector(15 downto 0));
	end component;

	component register is
	port (	inp: in std_logic_vector(15 downto 0);
			outp: out std_logic_vector(15 downto 0);
			en, clk: in std_logic);
	end component register;

	type FsmState is (St0, St1, St2, St3);
	signal fsm_state: FsmState := St0;

	signal IP, IR: std_logic_vector(15 downto 0);
	
	signal T1, T2, T3: std_logic_vector(15 downto 0);

	signal C_flag, Z_flag: std_logic;

	signal RF_A1, RF_A2, RF_A3: std_logic_vector(2 downto 0);
	signal RF_D1, RF_D2, RF_D3: std_logic_vector(15 downto 0);
	signal RF_en: std_logic;

	signal ALU_A, ALU_B, ALU_C: std_logic_vector(15 downto 0);
	signal ALU_S: std_logic_vector(1 downto 0);
	signal ALU_Z: std_logic;

	signal MEM_A: std_logic_vector(15 downto 0);
	signal MEM_D_in, MEM_D_out: std_logic_vector(15 downto 0);
	signal MEM_en_L: std_logic;

begin
	
	alu_unit: alu
				port map (A => ALU_A, B => ALU_B, C => ALU_C, S => ALU_S, Z => ALU_Z);

	mem_unit: Memory_asyncread_syncwrite
				port map (address => MEM_A,
						Mem_datain => MEM_D_in,
						clk => clk,
						Mem_wrbar => MEM_en_L,
						Mem_dataout => MEM_D_out);

	ALU_A <= T1;
	ALU_B <= T2;

	process (clk)

	variable next_fsm_var: FsmState;
	variable RF_en_var: std_logic;

	begin

		if(rising_edge(clk)) then
			case fsm_state is
				when St0 =>
					fsm_state <= St1;
					mem_en_L <= '1';
					IP <= ALU_C;
					IR <= MEM_D_out;
					RF_A1 <= IR(11 downto 9);
					RF_A2 <= IR(8 downto 6);
				when St1 =>
					fsm_state <= St2;
					T1 <= RF_D1;
					T2 <= RF_D2;
				when St2 =>
					fsm_state <= St3;
					T1 <= ALU_C;
					RF_A3 <= IR(5 downto 3);
					RF_D3 <= T1;
					RF_en <= '1';
				when St3 =>
					fsm_state <= St0;
					RF_en <= '0';
					MEM_A <= IP;
					ALU_A <= MEM_A;
					ALU_B <= "00000010";
					ALU_S <= "00";
					MEM_en_L <= '0';
				when others =>
					NULL;
			end case;
		end if;

	end process;
	

end architecture; -- Behave